package org.bukkit.persistence.annotation;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * This annotation marks a getter, setter or field for persistence.
 * 
 * Use this annotation in a class marked with PersistClass to persist its data.
 * 
 * At least one field, getter or setter in each persisted class must be marked as an id.
 * 
 * @author NathanWolf
 * @see PersistClass
 *
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD, ElementType.FIELD})
public @interface PersistField
{
	/**
	 * Specify that this field is an index field.
	 * 
	 * Each persisted class must have one and only one id field.
	 * 
	 * @return true if this field is the class' id field.
	 */
	boolean id() default false;
	
	
	/**
	 * Specify that this field should be autogenerated.
	 * 
	 * This is only valid for integer field types.
	 * 
	 * @return true if this is an autogenerated field.
	 */
	boolean auto() default false;
	
	
	/**
	 * Specify that this field is contained within the persisted class.
	 * 
	 * This is only valid for objects, or lists of objects. If an object is contained, it is not
	 * a unique entity- its data is persisted inside of the containing classes' data.
	 * 
	 * @return true if this field is contained.
	 */
	boolean contained() default false;
	
	
	/**
	 * Specify that this field is read-only. 
	 * 
	 * This can be used to bind to a field that only has a getter.
	 * 
	 * It's also very useful for using a hash function as id, though you 
	 * should be VERY careful about uniqueness in that case- id's MUST be
	 * unique.
	 * 
	 * @return true if this is a read-only field.
	 */
	boolean readonly() default false;
	
	/**
	 * Specify the column name to use for this field.
	 * 
	 * This can be omitted to auto-generate based on the Class definiteion.
	 * 
	 * @return The field name to use
	 */
	String name() default "";
}
